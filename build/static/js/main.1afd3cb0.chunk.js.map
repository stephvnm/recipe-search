{"version":3,"sources":["components/Search.js","components/Recipe.js","components/Recipes.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","search","handleInput","className","onSubmit","type","placeholder","onChange","required","Recipe","recipes","recipe","openPopup","onClick","uri","src","image","alt","source","label","icon","faClock","mins","h","Math","floor","m","prepTime","totalTime","faUtensils","ingredients","length","Recipes","map","key","calories","Popup","selected","closePopup","round","ingredientLines","ingredient","yield","href","url","target","rel","App","useState","setRecipes","query","setQuery","searchRequest","setSearchRequest","setSelected","fetchData","hitsCount","axios","get","then","data","hits","useEffect","foodArray","random","e","preventDefault","elements","value","arr","selectedRecipe","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1afd3cb0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Search ({ search, handleInput }) {\r\n  return (\r\n    <div className=\"search-box-wrapper\">\r\n      <h1>Welcome !</h1>\r\n      <form onSubmit={search}>\r\n        <input \r\n          type=\"text\"  \r\n          className='search-bar' \r\n          placeholder='Search for a recipe...' \r\n          onChange={handleInput} \r\n          required\r\n        />\r\n        <button type='submit' className='search-btn'>Search</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default Search;","import React from 'react';\r\n// FontAwesome icons\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-regular-svg-icons';\r\nimport { faUtensils } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nfunction Recipe({ recipes, recipe, openPopup }) {\r\n  const prepTime = (mins) => {\r\n    let h = Math.floor(mins /60);\r\n    let m = mins % 60;\r\n\r\n    m = m < 10 ? '0' + m : m;\r\n\r\n    return `${h}h ${m}m`;\r\n  }\r\n  \r\n  return (    \r\n    <div className='recipe' onClick={() => openPopup(recipes, recipe.recipe.uri)}>\r\n      <img src={recipe.recipe.image} alt=\"\"/>\r\n      <span className='source'>{recipe.recipe.source}</span>\r\n      <h3 className='recipe-label'>{recipe.recipe.label}</h3>\r\n      <div className=\"meta\">\r\n        <span className='time'>\r\n          <FontAwesomeIcon className='icon' icon={faClock} />\r\n          {prepTime(recipe.recipe.totalTime)} \r\n        </span>\r\n        <span className='ingredients-num'>\r\n          <FontAwesomeIcon className='icon' icon={faUtensils} />\r\n          {recipe.recipe.ingredients.length} ingredients\r\n        </span>\r\n      </div>\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport Recipe from './Recipe';\r\n\r\nfunction Recipes({ recipes, openPopup }) {\r\n  return (\r\n    <section className=\"recipes\">\r\n      {recipes.map(recipe => (     \r\n        <Recipe \r\n          key={recipe.recipe.calories + recipe.recipe.label} \r\n          recipes={recipes} \r\n          recipe={recipe} \r\n          openPopup={openPopup} />        \r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Recipes;","import React from 'react';\r\n\r\nfunction Popup({ selected, closePopup }) {\r\n  return (\r\n    <section className=\"popup\">\r\n      <div className=\"popup-container\">\r\n        <header className='popup-header'>\r\n          <h1>\r\n            {selected.recipe.label}\r\n            <span>{Math.round(selected.recipe.calories)} KCal</span>\r\n          </h1>          \r\n        </header>\r\n        <hr/>\r\n        <div className=\"main-content\">\r\n          <img src={selected.recipe.image} alt={selected.recipe.label}/>\r\n          <div className=\"separator-line\"></div>\r\n          <div className=\"ingredients\">\r\n            <h3>Ingredients:</h3>\r\n            {selected.recipe.ingredientLines.map(ingredient => (              \r\n              <li>{ingredient}</li>           \r\n            ))}\r\n              \r\n            <h4>{selected.recipe.yield}  Servings</h4> \r\n          </div>               \r\n        </div>\r\n        <div className=\"info\">          \r\n          <p>\r\n            For directions and other info related to this recipe - visit <a href={selected.recipe.url} target='_blank' rel=\"noopener noreferrer\">{selected.recipe.source}</a>.\r\n          </p>\r\n        </div>\r\n        <footer>\r\n          <button className=\"close-btn\" onClick={closePopup}>Go Back</button>\r\n        </footer>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Popup;","import React, { useState, useEffect } from 'react';\r\nimport Search from './components/Search';\r\nimport Recipes from './components/Recipes';\r\nimport Popup from './components/Popup';\r\nimport './index.css';\r\n\r\nimport axios from 'axios';\r\n\r\nfunction App () {\r\n  const [ recipes, setRecipes ] = useState([]);\r\n  const [ query, setQuery ] = useState('');\r\n  const [ searchRequest, setSearchRequest ] = useState(false);\r\n  const [ selected, setSelected ] =  useState({});\r\n\r\n  // API\r\n  const API_URL = 'https://api.edamam.com/search'; \r\n  const API_ID = 'a9e3fe49';\r\n  const API_KEY = '15e03f8ba33086be7a0e599c7e143cdc';\r\n\r\n  const fetchData = (query, hitsCount) => {\r\n    axios.get(`${API_URL}?q=${query}&app_id=${API_ID}&app_key=${API_KEY}&to=${hitsCount}`)\r\n      .then(({ data }) => setRecipes(data.hits));\r\n  }\r\n  \r\n  useEffect(() => { \r\n    const foodArray = ['chicken', 'pancakes', 'cake', 'tofu', 'banana', 'pizza', 'fries'];\r\n\r\n    let random = foodArray[Math.floor(Math.random() * foodArray.length)];\r\n\r\n    fetchData(random, 4);\r\n  }, []);    \r\n\r\n  const handleInput = (e) => setQuery(e.target.value);\r\n\r\n  // Search functionality\r\n  const search = (e) => {\r\n    e.preventDefault();\r\n    setSearchRequest(true);\r\n\r\n    // Fetch results\r\n    fetchData(query, 10); \r\n      \r\n    // Clear input field\r\n    e.target.elements[0].value = '';\r\n  }\r\n\r\n  // Open recipe popup\r\n  const openPopup = (arr, uri) => {\r\n    const selectedRecipe = arr.find(recipe => recipe.recipe.uri === uri);\r\n    setSelected(selectedRecipe);      \r\n  };\r\n\r\n  // Close popup\r\n  const closePopup = () => setSelected({});\r\n\r\n  return (\r\n    <div className='App'>\r\n      <header className='header'>    \r\n        <Search search={search} handleInput={handleInput}/>        \r\n      </header>\r\n      <main>\r\n        {searchRequest ?         \r\n          <div className='separator'><h2>Search results for: {query}</h2></div> : \r\n          <div className='separator'><h2>Recipes of the Day</h2></div> }\r\n        <Recipes recipes={recipes} openPopup={openPopup}/>         \r\n       \r\n        {(typeof selected.recipe != \"undefined\") ? <Popup selected={selected} closePopup={closePopup}/> : false}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}